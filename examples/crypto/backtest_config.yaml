# Template configuration for cryptocurrency backtesting
#
# Usage:
#   1. Prepare an OHLCV dataset (e.g., with ``scripts/data_collector/crypto``
#      which fetches data from the OKX API via ``ccxt``) and store it at the
#      path specified by ``qlib_init.provider_uri`` (default:
#      ``~/.qlib/qlib_data/crypto_data``).  The file
#      ``instruments.json`` under this directory lists the tradable
#      symbols used by ``CryptoInstrumentProvider``.  The data must contain
#      open, high, low, close and volume fields at the desired frequency.
#   2. Run your workflow or scripts with this configuration. For example:
#      ``python examples/crypto/workflow.py --config examples/crypto/backtest_config.yaml``
#      or load it via ``qlib.backtest`` APIs.
#
# Dataset limitations:
#   - Only instruments present in the prepared dataset can be backtested.
#   - Public sources such as OKX may provide incomplete history; verify data
#     quality before relying on the results.

qlib_init:
  provider_uri: "~/.qlib/qlib_data/crypto_data"
  region: "custom"
  instrument_provider:
    kwargs:
      source: "~/.qlib/qlib_data/crypto_data/instruments.json"

exchange:
  class: "CryptoExchange"
  module_path: "qlib.backtest.crypto_exchange"
  kwargs:
    freq: "1min"
    fee_model:
      class: "PercentageFeeModel"
      kwargs:
        rate: 0.001
    slippage_model:
      class: "LinearSlippageModel"
      kwargs:
        rate: 0.0005

executor:
  class: "SimulatorExecutor"
  module_path: "qlib.backtest.executor"
  kwargs:
    time_per_step: "1min"

# A simple strategy placeholder
strategy:
  class: "TopkStrategy"
  module_path: "qlib.contrib.strategy.rule_strategy"
  kwargs:
    topk: 10
    sort: "ascend"
